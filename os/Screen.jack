class Screen {
    
    static Array powerOf2;   // [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]
    static Array screen;     // base address of the screen RAM segment
    static boolean color;    // black if true, white otherwise

    // init initializes Screen class.
    function void init() {
        var int i;

        let powerOf2 = Array.new(17);
        let screen = 16384;
        let color = true;

        let powerOf2[0] = 1;
        while (i < 16) {
            let i = i + 1;
            let powerOf2[i] = powerOf2[i-1] + powerOf2[i-1];
        }

        return;
    }

    // clearScreen clears the entire screen.
    function void clearScreen() {
        var int i;    
        while (i < 8192) {
            let screen[i] = 0;
            let i = i + 1;
        }
        return; 
    }

    // setColor sets the static variable 'color' to true or false (black/white).
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    // updateLocation updates the color of screen on given memory address.
    function void updateLocation(int addr, int v) {
        if (color) {
            let screen[addr] = (screen[addr] | v);
        } else {
            let screen[addr] = (screen[addr] & ~v);
        }
        return;
    }

    // drawPixel changes the color of one particular pixel.
    function void drawPixel(int x, int y) {
        var int col, pos, addr;

        let col = x / 16;
        let pos = x - (col * 16);
        let addr = 32 * y + col;
        do Screen.updateLocation(addr, powerOf2[pos]);
        
        return;
    }

    // drawVertical draws a vertical line from (x, start) to (x, end).
    function void drawVertical(int x, int start, int end) {
        var int temp, col, pos, addr;

        if (start > end) {
            let temp = start;
            let start = end;
            let end = temp;
        }

        let col = x / 16;
        let pos = x - (col * 16);
        let addr = 32 * start + col;

        while (~(start > end)) {
            do Screen.updateLocation(addr, powerOf2[pos]);
            let start = start + 1;
            let addr = addr + 32;
        }

        return;
    }

    // drawHorizontal draws a horizontal line from (start, y) to (end, y).
    function void drawHorizontal(int y, int start, int end) {
        var int temp, row, left, right, pos, addr;

        if (start > end) {
            let temp = start;
            let start = end;
            let end = temp;
        }

        let row = 32 * y;
        let left = start / 16;
        let right = end / 16;

        // draw the left edge
        let addr = row + left;
        let pos = start - (left * 16);
        while (pos < 16) {
            do Screen.updateLocation(addr, powerOf2[pos]);
            let pos = pos + 1;
        }

        // color the middle segment
        let left = left + 1;
        while (left < right) {
            let screen[row + left] = color;
            let left = left + 1;
        }

        // color the right edge
        let addr = row + right;
        let pos = end - (right * 16);
        while (~(pos < 0)) {
            do Screen.updateLocation(addr, powerOf2[pos]);
            let pos = pos - 1;
        }

        return;
    }

    // drawDiagonal draws a diagonal line.
    function void drawDiagonal(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff, temp, isRight;

        if (y1 > y2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = Math.abs(x2 - x1);
        let dy = y2 - y1;
        let isRight = (x1 < x2);

        while (~(a > dx) & ~(b > dy)) {
            if (isRight) {
                do Screen.drawPixel(x1 + a, y1 + b);
            } else {
                do Screen.drawPixel(x1 - a, y1 + b);
            }

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    // drawLine assigns given coordinates to an appropriate drawing procedure.
    function void drawLine(int x1, int y1, int x2, int y2) {
        // error if out of screen range
        if ((x1 < 0) | (x1 > 511) | (x2 < 0)| (x2 > 511) | (y1 < 0) | (y1 > 255) | (y2 < 0) | (y2 > 255)) {
            do Sys.error(8);
        }

        // if vertical
        if (x1 = x2) {
            do Screen.drawVertical(x1, y1, y2);
            return;
        }

        // if horizontal
        if (y1 = y2) {
            do Screen.drawHorizontal(y1, x1, x2);
            return;
        }

        // if diagonal
        do Screen.drawDiagonal(x1, y1, x2, y2);
        return;
    }

    // drawRectangle draws a rectangle.
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, temp;

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        if (dx < dy) {
            if (x1 > x2) {
                let temp = x1;
                let x1 = x2;
                let x2 = temp;
            }
            while (~(a > dx)) {
                do Screen.drawVertical(x1 + a, y1, y2);
                let a = a + 1;
            }
        } else {
            if (y1 > y2) {
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
            }
            while (~(a > dy)) {
                do Screen.drawHorizontal(y1 + a, x1, x2);
                let a = a + 1;
            }
        }

        return;
    }

    function void drawCircle(int x, int y, int r) {
    }
}
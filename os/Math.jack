class Math {
    
    // powerOf2 should be : [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768]
    static Array powerOf2

    // init initializes the library.
    function void init() {
        var int i;

        let powerOf2 = Array.new(16);
        let powerOf2[0] = 1;

        let i = 1
        while (i < 16) {
            let powerOf2[i] = powerOf2[i-1] * 2;
            let i = i + 1;
        }
    }

    // abs returns the absolute value of n.
    function int abs(int n) {
        if (n < 0) {
            return -n;
        }
        return n;
    }

    // toBin returns an array consists of 16 bit binary forms of n.
    // if n == 5, returned array would be [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1].
    function Array toBin(int n) {
        var int i;
        var Array bin;

        let bin = Array.new(16);

        while (n > 0) {
            while (~(n < powerOf2[i])) {
                let i = i + 1;
            }

            let bin[16 - i] = 1;
            let n = n - powerOf2[i - 1];
            let i = 0;
        }

        return bin;
    }

    // multiply returns the product of x and y.
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        var boolean isNeg;
        var Array binY;

        // if either x or y is negative, set isNeg to true
        let isNeg = (x < 0 & y > 0) | (x > 0 & x < 0);

        let x = abs(x);
        let y = abs(y);
        let shiftedX = x;
        let binY = toBin(y);
        let i = 15;

        while (i > -1) {
            if (binY[i] = 1) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i - 1;
        }

        do binY.dispose();

        if (isNeg) {
            let sum = -sum;
        }

        return sum;
    }

    // divide returns the quotient of x and y.
    function int divide(int x, int y) {
        var int q;

        if (y > x) {
            return 0;
        }

        let q = divide(x, 2 * y);

        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        } else {
            return 2 * q + 1;
        }
    }

    // power returns x to power y.
    function int power(int x, int y) {
        var n int;

        let n = 1;

        while (y > 0) {
            let n = n * x;
            let y = y - 1;
        }

        return n;
    }

    // sqrt returns the integer part of the square root of n.
    function int sqrt(int n) {
        var int m, i, temp;

        let i = n / 2 - 1;

        while (i > -1) {
            let temp = m + power(2, i)
            if (~(power(temp, 2) > n)) {
                let m = temp;
            }
            let i = i - 1;
        }

        return m;
    }

    // max compares x and y, then returns the greater number.
    function int max(int x, int y) {
        if (x > y) {
            return x;
        } else {
            return y;
        }
    }

    // min compares x and y, then returns the smaller number.
    function int min(int x, int y) {
        if (x < y) {
            return x;
        } else {
            return y;
        }
    }
}